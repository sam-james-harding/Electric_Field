/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */
int newX;
int newY;
int newB;

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:chargeCreator:226677:
  appc.background(230);
} //_CODE_:chargeCreator:226677:

public void newChargeButton_click(GButton source, GEvent event) { //_CODE_:newChargeButton:890271:
  println("newChargeButton - GButton >> GEvent." + event + " @ " + millis());
  Integer[] newCharge = {newX, newY, newB};
  charges.add(newCharge);
} //_CODE_:newChargeButton:890271:

public void bSlider_change(GSlider source, GEvent event) { //_CODE_:bSlider:367377:
  println("xSlider - GSlider >> GEvent." + event + " @ " + millis());
  newB = source.getValueI();
} //_CODE_:bSlider:367377:

public void xSlider_change(GSlider source, GEvent event) { //_CODE_:xSlider:522848:
  println("xSlider - GSlider >> GEvent." + event + " @ " + millis());
  newX = source.getValueI();
} //_CODE_:xSlider:522848:

public void ySlider_change(GSlider source, GEvent event) { //_CODE_:ySlider:696707:
  println("ySlider - GSlider >> GEvent." + event + " @ " + millis());
  newY = source.getValueI();
} //_CODE_:ySlider:696707:

public void clearButton_click(GButton source, GEvent event) { //_CODE_:clearButton:947811:
  println("clearButton - GButton >> GEvent." + event + " @ " + millis());
  clearTestCharges = true;
} //_CODE_:clearButton:947811:

public void clearChargesButton_click(GButton source, GEvent event) { //_CODE_:clearChargesButton:227221:
  println("clearChargesButton - GButton >> GEvent." + event + " @ " + millis());
  clearCharges = true;
  clearTestCharges = true;
} //_CODE_:clearChargesButton:227221:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  chargeCreator = GWindow.getWindow(this, "Simulator Manager", 0, 0, 300, 300, JAVA2D);
  chargeCreator.noLoop();
  chargeCreator.setActionOnClose(G4P.EXIT_APP);
  chargeCreator.addDrawHandler(this, "win_draw1");
  nChargeLabel = new GLabel(chargeCreator, 100, 0, 114, 20);
  nChargeLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  nChargeLabel.setText("Create New Charge");
  nChargeLabel.setOpaque(false);
  newChargeButton = new GButton(chargeCreator, 100, 160, 117, 30);
  newChargeButton.setText("Create New Charge");
  newChargeButton.addEventHandler(this, "newChargeButton_click");
  bSlider = new GSlider(chargeCreator, 65, 118, 232, 40, 10.0);
  bSlider.setShowValue(true);
  bSlider.setShowLimits(true);
  bSlider.setLimits(0, -100, 100);
  bSlider.setNumberFormat(G4P.INTEGER, 0);
  bSlider.setOpaque(false);
  bSlider.addEventHandler(this, "bSlider_change");
  xSlider = new GSlider(chargeCreator, 68, 24, 229, 40, 10.0);
  xSlider.setShowValue(true);
  xSlider.setShowLimits(true);
  xSlider.setLimits(0, 0, 600);
  xSlider.setNumberFormat(G4P.INTEGER, 0);
  xSlider.setOpaque(false);
  xSlider.addEventHandler(this, "xSlider_change");
  ySlider = new GSlider(chargeCreator, 67, 72, 230, 40, 10.0);
  ySlider.setShowValue(true);
  ySlider.setShowLimits(true);
  ySlider.setLimits(0, 0, 600);
  ySlider.setNumberFormat(G4P.INTEGER, 0);
  ySlider.setOpaque(false);
  ySlider.addEventHandler(this, "ySlider_change");
  label1 = new GLabel(chargeCreator, 2, 125, 62, 27);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("Electric Charge");
  label1.setOpaque(false);
  label2 = new GLabel(chargeCreator, 2, 78, 64, 27);
  label2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label2.setText("Y coordinate");
  label2.setOpaque(false);
  label3 = new GLabel(chargeCreator, 1, 30, 65, 27);
  label3.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label3.setText("X coordinate");
  label3.setOpaque(false);
  clearButton = new GButton(chargeCreator, 100, 210, 119, 30);
  clearButton.setText("Clear Test Charges");
  clearButton.addEventHandler(this, "clearButton_click");
  clearChargesButton = new GButton(chargeCreator, 100, 260, 116, 30);
  clearChargesButton.setText("Clear All");
  clearChargesButton.addEventHandler(this, "clearChargesButton_click");
  chargeCreator.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow chargeCreator;
GLabel nChargeLabel; 
GButton newChargeButton; 
GSlider bSlider; 
GSlider xSlider; 
GSlider ySlider; 
GLabel label1; 
GLabel label2; 
GLabel label3; 
GButton clearButton; 
GButton clearChargesButton; 
